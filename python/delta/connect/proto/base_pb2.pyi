#
# Copyright (2024) The Delta Lake Project Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Copyright (2024) The Delta Lake Project Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class DeltaTable(google.protobuf.message.Message):
    """Information required to access a Delta table either by name or by path."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Path(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class HadoopConfEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(
                self, field_name: typing.Literal["key", b"key", "value", b"value"]
            ) -> None: ...

        PATH_FIELD_NUMBER: builtins.int
        HADOOP_CONF_FIELD_NUMBER: builtins.int
        path: builtins.str
        """(Required) Path to the Delta table."""
        @property
        def hadoop_conf(
            self,
        ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """(Optional) Hadoop configuration used to access the file system."""
        def __init__(
            self,
            *,
            path: builtins.str = ...,
            hadoop_conf: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing.Literal["hadoop_conf", b"hadoop_conf", "path", b"path"]
        ) -> None: ...

    PATH_FIELD_NUMBER: builtins.int
    TABLE_OR_VIEW_NAME_FIELD_NUMBER: builtins.int
    table_or_view_name: builtins.str
    @property
    def path(self) -> global___DeltaTable.Path: ...
    def __init__(
        self,
        *,
        path: global___DeltaTable.Path | None = ...,
        table_or_view_name: builtins.str = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "access_type",
            b"access_type",
            "path",
            b"path",
            "table_or_view_name",
            b"table_or_view_name",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "access_type",
            b"access_type",
            "path",
            b"path",
            "table_or_view_name",
            b"table_or_view_name",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing.Literal["access_type", b"access_type"]
    ) -> typing.Literal["path", "table_or_view_name"] | None: ...

global___DeltaTable = DeltaTable
